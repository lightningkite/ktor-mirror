buildscript {
    ext.repositoryName = project.name
    ext.versionsProperties = new Properties()
    file("versions.properties").withInputStream { versionsProperties.load(it) }

    repositories {
        mavenLocal()
        jcenter()
        maven { url 'https://dl.bintray.com/kotlin/kotlin-dev' }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${versionsProperties.kotlin}"
        classpath "com.lightningkite:mirror-plugin:0.0.2"
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.+'
    }
}
apply plugin: 'kotlin-multiplatform'
apply plugin: 'com.lightningkite.mirror'
apply plugin: 'maven-publish'

group 'com.lightningkite'
version versionsProperties.getProperty(repositoryName)

repositories {
    jcenter()
    mavenCentral()
    mavenLocal()
    maven { url "https://kotlin.bintray.com/kotlinx" }
}


kotlin {
    targets {
        fromPreset(presets.jvm, 'jvm')
        fromPreset(presets.jvm, 'server')
        fromPreset(presets.js, 'js')
        if(org.gradle.internal.os.OperatingSystem.current().isMacOsX()){
            fromPreset(presets.iosX64, 'iosx64')
            fromPreset(presets.iosArm64, 'ios')
        }
    }

    sourceSets {
        commonMain {
            dependencies {
                api 'org.jetbrains.kotlin:kotlin-stdlib-common'
                api "io.ktor:ktor-client-core:${versionsProperties.ktor}"
                api "com.lightningkite:mirror-runtime-metadata:${versionsProperties.mirror}"
            }
        }
        commonTest {
            dependencies {
                api 'org.jetbrains.kotlin:kotlin-test-common'
                api 'org.jetbrains.kotlin:kotlin-test-annotations-common'
                api "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:${versionsProperties.kotlinx_coroutines}"
            }
        }
        jvmMain {
            dependencies {
                api 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
                api "io.ktor:ktor-client-core-jvm:${versionsProperties.ktor}"
                api "com.lightningkite:mirror-runtime-jvm:${versionsProperties.mirror}"
            }
        }
        jvmTest {
            dependencies {
                api "org.jetbrains.kotlinx:kotlinx-coroutines-core:${versionsProperties.kotlinx_coroutines}"
                api 'org.jetbrains.kotlin:kotlin-test'
                api 'org.jetbrains.kotlin:kotlin-test-junit'
            }
        }
        serverMain {
            dependencies {
                api 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
                api "io.ktor:ktor-client-core-jvm:${versionsProperties.ktor}"
                api "io.ktor:ktor-server-core-jvm:${versionsProperties.ktor}"
                api "io.ktor:ktor-auth:${versionsProperties.ktor}"
                api "io.ktor:ktor-websockets:${versionsProperties.ktor}"
                api "com.lightningkite:mirror-runtime-jvm:${versionsProperties.mirror}"

                api "me.gosimple:nbvcxz:1.4.2"

                api 'de.mkammerer:argon2-jvm:2.5'
            }
        }
        serverTest {
            dependencies {
                api "org.jetbrains.kotlinx:kotlinx-coroutines-core:${versionsProperties.kotlinx_coroutines}"
                api 'org.jetbrains.kotlin:kotlin-test'
                api 'org.jetbrains.kotlin:kotlin-test-junit'

                api "io.ktor:ktor-server-test-host:${versionsProperties.ktor}"
                api "io.ktor:ktor-server-netty:${versionsProperties.ktor}"
                api "io.ktor:ktor-server-cio:${versionsProperties.ktor}"
                api "io.ktor:ktor-auth-jwt:${versionsProperties.ktor}"
            }
        }
        jsMain {
            dependencies {
                api 'org.jetbrains.kotlin:kotlin-stdlib-js'
                api "io.ktor:ktor-client-core-js:${versionsProperties.ktor}"
                api "com.lightningkite:mirror-runtime-js:${versionsProperties.mirror}"
            }
        }
        jsTest {
            dependencies {
                api "org.jetbrains.kotlinx:kotlinx-coroutines-core-js:${versionsProperties.kotlinx_coroutines}"
                api 'org.jetbrains.kotlin:kotlin-test-js'
            }
        }

        if (org.gradle.internal.os.OperatingSystem.current().isMacOsX()) {
            iosMain {
                dependencies {
                    api "io.ktor:ktor-client-core-ios:${versionsProperties.ktor}"
                    api "com.lightningkite:mirror-runtime-ios:${versionsProperties.mirror}"
                }
            }
            iosTest {
                dependencies {
                    api "org.jetbrains.kotlinx:kotlinx-coroutines-core-native:${versionsProperties.kotlinx_coroutines}"
                }
            }
            iosx64Main {
                kotlin.srcDir('src/iosMain/kotlin')
                dependencies {
                    api "io.ktor:ktor-client-core-ios:${versionsProperties.ktor}"
                    api "com.lightningkite:mirror-runtime-iosx64:${versionsProperties.mirror}"
                }
            }
            iosx64Test {
                kotlin.srcDir('src/iosTest/kotlin')
                dependencies {
                    api "org.jetbrains.kotlinx:kotlinx-coroutines-core-native:${versionsProperties.kotlinx_coroutines}"
                }
            }
        }
    }
}
tasks.withType(compileKotlinJs.getClass()) {
    kotlinOptions {
        moduleKind = "umd"
        sourceMap = true
        metaInfo = true
    }
}

if(org.gradle.internal.os.OperatingSystem.current().isMacOsX()) {
    task iosTest {
        def device = project.findProperty("iosDevice")?.toString() ?: "iPhone 8"
        dependsOn 'linkTestDebugExecutableIosx64'
        group = JavaBasePlugin.VERIFICATION_GROUP
        description = "Runs tests for target 'ios' on an iOS simulator"

        doLast {
            def binary = kotlin.targets.iosx64.compilations.test.getBinary('EXECUTABLE', 'DEBUG')
            exec {
                commandLine 'xcrun', 'simctl', 'spawn', device, binary.absolutePath
            }
        }
    }
    tasks.check.dependsOn(tasks.iosTest)
}

apply from: rootProject.file("gradle/publish.gradle")
